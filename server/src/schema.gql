# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type CategoryCount {
  books: Int!
}

type Category {
  id: ID!
  name: String!
  slug: String!
  books: [Book!]
  _count: CategoryCount!
}

type Media {
  id: ID!
  thumbnail: String!
  image: String!
  blurhash: String!
  imageH: Int!
  imageW: Int!
  metadata: JSON
  profile: Profile
  book: Book
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type PriceCount {
  book: Int!
}

type Price {
  id: ID!
  value: Decimal!
  unit: PriceUnit!
  book: [Book!]
  _count: PriceCount!
}

"""An arbitrary-precision Decimal type"""
scalar Decimal

enum PriceUnit {
  VND
  USD
  EURO
}

type BookCount {
  categories: Int!
  tickets: Int!
}

type Book {
  id: ID!
  title: String!
  description: String!
  publisher: String!
  author: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  epub: String!
  mediaId: String
  priceId: String!
  categories: [Category!]
  tickets: [Ticket!]
  media: Media
  price: Price!
  _count: BookCount!
  getMediaByBookId: Media
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Ticket {
  createdAt: DateTime!
  updatedAt: DateTime!
  rentDate: DateTime!
  returnDate: DateTime!
  bookId: String!
  userId: String!
  book: Book!
  user: User!
}

type UserCount {
  tickets: Int!
}

type User {
  id: ID!
  username: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  role: Role!
  profile: Profile
  tickets: [Ticket!]
  _count: UserCount!
}

enum Role {
  member
  librarian
  admin
}

type AddressCount {
  profile: Int!
}

type Address {
  id: ID!
  street: String!
  country: String!
  state: String!
  city: String!
  province: String!
  profile: [Profile!]
  _count: AddressCount!
}

type Profile {
  id: ID!
  email: String!
  firstName: String!
  lastName: String!
  phone: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  userId: String!
  mediaId: String!
  addressId: Int
  user: User
  media: Media!
  address: [Address!]
}

type Query {
  profiles(where: ProfileWhereInput, orderBy: [ProfileOrderByWithRelationAndSearchRelevanceInput!], cursor: ProfileWhereUniqueInput, take: Int, skip: Int, distinct: [ProfileScalarFieldEnum!]): [Profile!]
  getMyProfile: Profile
  getProfile(where: ProfileWhereUniqueInput!): Profile
  books(where: BookWhereInput, orderBy: [BookOrderByWithRelationAndSearchRelevanceInput!], cursor: BookWhereUniqueInput, take: Int, skip: Int, distinct: [BookScalarFieldEnum!]): [Book!]!
  book(where: BookWhereUniqueInput!): Book!
}

input ProfileWhereInput {
  AND: [ProfileWhereInput!]
  OR: [ProfileWhereInput!]
  NOT: [ProfileWhereInput!]
  id: StringFilter
  email: StringFilter
  firstName: StringFilter
  lastName: StringFilter
  phone: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  userId: StringFilter
  mediaId: StringFilter
  addressId: IntNullableFilter
  user: UserRelationFilter
  media: MediaRelationFilter
  address: AddressNullableRelationFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  search: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  search: String
  not: NestedStringFilter
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntNullableFilter
}

input NestedIntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntNullableFilter
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: StringFilter
  username: StringFilter
  password: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  role: EnumRoleFilter
  profile: ProfileNullableRelationFilter
  tickets: TicketListRelationFilter
}

input EnumRoleFilter {
  equals: Role
  in: [Role!]
  notIn: [Role!]
  not: NestedEnumRoleFilter
}

input NestedEnumRoleFilter {
  equals: Role
  in: [Role!]
  notIn: [Role!]
  not: NestedEnumRoleFilter
}

input ProfileNullableRelationFilter {
  is: ProfileWhereInput
  isNot: ProfileWhereInput
}

input TicketListRelationFilter {
  every: TicketWhereInput
  some: TicketWhereInput
  none: TicketWhereInput
}

input TicketWhereInput {
  AND: [TicketWhereInput!]
  OR: [TicketWhereInput!]
  NOT: [TicketWhereInput!]
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  rentDate: DateTimeFilter
  returnDate: DateTimeFilter
  bookId: StringFilter
  userId: StringFilter
  book: BookRelationFilter
  user: UserRelationFilter
}

input BookRelationFilter {
  is: BookWhereInput
  isNot: BookWhereInput
}

input BookWhereInput {
  AND: [BookWhereInput!]
  OR: [BookWhereInput!]
  NOT: [BookWhereInput!]
  id: StringFilter
  title: StringFilter
  description: StringFilter
  publisher: StringFilter
  author: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  epub: StringFilter
  mediaId: StringNullableFilter
  priceId: StringFilter
  categories: CategoryListRelationFilter
  tickets: TicketListRelationFilter
  media: MediaNullableRelationFilter
  price: PriceRelationFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  search: String
  mode: QueryMode
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  search: String
  not: NestedStringNullableFilter
}

input CategoryListRelationFilter {
  every: CategoryWhereInput
  some: CategoryWhereInput
  none: CategoryWhereInput
}

input CategoryWhereInput {
  AND: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  NOT: [CategoryWhereInput!]
  id: StringFilter
  name: StringFilter
  slug: StringFilter
  books: BookListRelationFilter
}

input BookListRelationFilter {
  every: BookWhereInput
  some: BookWhereInput
  none: BookWhereInput
}

input MediaNullableRelationFilter {
  is: MediaWhereInput
  isNot: MediaWhereInput
}

input MediaWhereInput {
  AND: [MediaWhereInput!]
  OR: [MediaWhereInput!]
  NOT: [MediaWhereInput!]
  id: StringFilter
  thumbnail: StringFilter
  image: StringFilter
  blurhash: StringFilter
  imageH: IntFilter
  imageW: IntFilter
  metadata: JsonNullableFilter
  profile: ProfileNullableRelationFilter
  book: BookNullableRelationFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntFilter
}

input NestedIntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntFilter
}

input JsonNullableFilter {
  equals: JSON
  path: [String!]
  string_contains: String
  string_starts_with: String
  string_ends_with: String
  array_contains: JSON
  array_starts_with: JSON
  array_ends_with: JSON
  lt: JSON
  lte: JSON
  gt: JSON
  gte: JSON
  not: JSON
}

input BookNullableRelationFilter {
  is: BookWhereInput
  isNot: BookWhereInput
}

input PriceRelationFilter {
  is: PriceWhereInput
  isNot: PriceWhereInput
}

input PriceWhereInput {
  AND: [PriceWhereInput!]
  OR: [PriceWhereInput!]
  NOT: [PriceWhereInput!]
  id: StringFilter
  value: DecimalFilter
  unit: EnumPriceUnitFilter
  book: BookListRelationFilter
}

input DecimalFilter {
  equals: Decimal
  in: [Decimal!]
  notIn: [Decimal!]
  lt: Decimal
  lte: Decimal
  gt: Decimal
  gte: Decimal
  not: NestedDecimalFilter
}

input NestedDecimalFilter {
  equals: Decimal
  in: [Decimal!]
  notIn: [Decimal!]
  lt: Decimal
  lte: Decimal
  gt: Decimal
  gte: Decimal
  not: NestedDecimalFilter
}

input EnumPriceUnitFilter {
  equals: PriceUnit
  in: [PriceUnit!]
  notIn: [PriceUnit!]
  not: NestedEnumPriceUnitFilter
}

input NestedEnumPriceUnitFilter {
  equals: PriceUnit
  in: [PriceUnit!]
  notIn: [PriceUnit!]
  not: NestedEnumPriceUnitFilter
}

input MediaRelationFilter {
  is: MediaWhereInput
  isNot: MediaWhereInput
}

input AddressNullableRelationFilter {
  is: AddressWhereInput
  isNot: AddressWhereInput
}

input AddressWhereInput {
  AND: [AddressWhereInput!]
  OR: [AddressWhereInput!]
  NOT: [AddressWhereInput!]
  id: IntFilter
  street: StringFilter
  country: StringFilter
  state: StringFilter
  city: StringFilter
  province: StringFilter
  profile: ProfileListRelationFilter
}

input ProfileListRelationFilter {
  every: ProfileWhereInput
  some: ProfileWhereInput
  none: ProfileWhereInput
}

input ProfileOrderByWithRelationAndSearchRelevanceInput {
  id: SortOrder
  email: SortOrder
  firstName: SortOrder
  lastName: SortOrder
  phone: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
  mediaId: SortOrder
  addressId: SortOrderInput
  user: UserOrderByWithRelationAndSearchRelevanceInput
  media: MediaOrderByWithRelationAndSearchRelevanceInput
  address: AddressOrderByWithRelationAndSearchRelevanceInput
  _relevance: ProfileOrderByRelevanceInput
}

enum SortOrder {
  asc
  desc
}

input SortOrderInput {
  sort: SortOrder!
  nulls: NullsOrder
}

enum NullsOrder {
  first
  last
}

input UserOrderByWithRelationAndSearchRelevanceInput {
  id: SortOrder
  username: SortOrder
  password: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  role: SortOrder
  profile: ProfileOrderByWithRelationAndSearchRelevanceInput
  tickets: TicketOrderByRelationAggregateInput
  _relevance: UserOrderByRelevanceInput
}

input TicketOrderByRelationAggregateInput {
  _count: SortOrder
}

input UserOrderByRelevanceInput {
  fields: [UserOrderByRelevanceFieldEnum!]!
  sort: SortOrder!
  search: String!
}

enum UserOrderByRelevanceFieldEnum {
  id
  username
  password
}

input MediaOrderByWithRelationAndSearchRelevanceInput {
  id: SortOrder
  thumbnail: SortOrder
  image: SortOrder
  blurhash: SortOrder
  imageH: SortOrder
  imageW: SortOrder
  metadata: SortOrderInput
  profile: ProfileOrderByWithRelationAndSearchRelevanceInput
  book: BookOrderByWithRelationAndSearchRelevanceInput
  _relevance: MediaOrderByRelevanceInput
}

input BookOrderByWithRelationAndSearchRelevanceInput {
  id: SortOrder
  title: SortOrder
  description: SortOrder
  publisher: SortOrder
  author: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  epub: SortOrder
  mediaId: SortOrderInput
  priceId: SortOrder
  categories: CategoryOrderByRelationAggregateInput
  tickets: TicketOrderByRelationAggregateInput
  media: MediaOrderByWithRelationAndSearchRelevanceInput
  price: PriceOrderByWithRelationAndSearchRelevanceInput
  _relevance: BookOrderByRelevanceInput
}

input CategoryOrderByRelationAggregateInput {
  _count: SortOrder
}

input PriceOrderByWithRelationAndSearchRelevanceInput {
  id: SortOrder
  value: SortOrder
  unit: SortOrder
  book: BookOrderByRelationAggregateInput
  _relevance: PriceOrderByRelevanceInput
}

input BookOrderByRelationAggregateInput {
  _count: SortOrder
}

input PriceOrderByRelevanceInput {
  fields: [PriceOrderByRelevanceFieldEnum!]!
  sort: SortOrder!
  search: String!
}

enum PriceOrderByRelevanceFieldEnum {
  id
}

input BookOrderByRelevanceInput {
  fields: [BookOrderByRelevanceFieldEnum!]!
  sort: SortOrder!
  search: String!
}

enum BookOrderByRelevanceFieldEnum {
  id
  title
  description
  publisher
  author
  epub
  mediaId
  priceId
}

input MediaOrderByRelevanceInput {
  fields: [MediaOrderByRelevanceFieldEnum!]!
  sort: SortOrder!
  search: String!
}

enum MediaOrderByRelevanceFieldEnum {
  id
  thumbnail
  image
  blurhash
}

input AddressOrderByWithRelationAndSearchRelevanceInput {
  id: SortOrder
  street: SortOrder
  country: SortOrder
  state: SortOrder
  city: SortOrder
  province: SortOrder
  profile: ProfileOrderByRelationAggregateInput
  _relevance: AddressOrderByRelevanceInput
}

input ProfileOrderByRelationAggregateInput {
  _count: SortOrder
}

input AddressOrderByRelevanceInput {
  fields: [AddressOrderByRelevanceFieldEnum!]!
  sort: SortOrder!
  search: String!
}

enum AddressOrderByRelevanceFieldEnum {
  street
  country
  state
  city
  province
}

input ProfileOrderByRelevanceInput {
  fields: [ProfileOrderByRelevanceFieldEnum!]!
  sort: SortOrder!
  search: String!
}

enum ProfileOrderByRelevanceFieldEnum {
  id
  email
  firstName
  lastName
  phone
  userId
  mediaId
}

input ProfileWhereUniqueInput {
  id: String
  email: String
  userId: String
  mediaId: String
  AND: [ProfileWhereInput!]
  OR: [ProfileWhereInput!]
  NOT: [ProfileWhereInput!]
  firstName: StringFilter
  lastName: StringFilter
  phone: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  addressId: IntNullableFilter
  user: UserRelationFilter
  media: MediaRelationFilter
  address: AddressNullableRelationFilter
}

enum ProfileScalarFieldEnum {
  id
  email
  firstName
  lastName
  phone
  createdAt
  updatedAt
  userId
  mediaId
  addressId
}

input BookWhereUniqueInput {
  id: String
  mediaId: String
  AND: [BookWhereInput!]
  OR: [BookWhereInput!]
  NOT: [BookWhereInput!]
  title: StringFilter
  description: StringFilter
  publisher: StringFilter
  author: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  epub: StringFilter
  priceId: StringFilter
  categories: CategoryListRelationFilter
  tickets: TicketListRelationFilter
  media: MediaNullableRelationFilter
  price: PriceRelationFilter
}

enum BookScalarFieldEnum {
  id
  title
  description
  publisher
  author
  createdAt
  updatedAt
  epub
  mediaId
  priceId
}

type Mutation {
  createProfile(data: ProfileCreateInput!): Profile!
  createBook(data: BookCreateInput!): Book!
  updateBook(data: BookUpdateInput!, where: BookWhereUniqueInput!): Book!
}

input ProfileCreateInput {
  id: String
  email: String!
  firstName: String!
  lastName: String!
  phone: String!
  createdAt: DateTime
  updatedAt: DateTime
  user: UserCreateNestedOneWithoutProfileInput!
  media: MediaCreateNestedOneWithoutProfileInput!
  address: AddressCreateNestedOneWithoutProfileInput
}

input UserCreateNestedOneWithoutProfileInput {
  create: UserCreateWithoutProfileInput
  connectOrCreate: UserCreateOrConnectWithoutProfileInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutProfileInput {
  id: String
  username: String!
  password: String!
  createdAt: DateTime
  updatedAt: DateTime
  role: Role!
  tickets: TicketCreateNestedManyWithoutUserInput
}

input TicketCreateNestedManyWithoutUserInput {
  create: [TicketCreateWithoutUserInput!]
  connectOrCreate: [TicketCreateOrConnectWithoutUserInput!]
  createMany: TicketCreateManyUserInputEnvelope
  connect: [TicketWhereUniqueInput!]
}

input TicketCreateWithoutUserInput {
  createdAt: DateTime
  updatedAt: DateTime
  rentDate: DateTime!
  returnDate: DateTime!
  book: BookCreateNestedOneWithoutTicketsInput!
}

input BookCreateNestedOneWithoutTicketsInput {
  create: BookCreateWithoutTicketsInput
  connectOrCreate: BookCreateOrConnectWithoutTicketsInput
  connect: BookWhereUniqueInput
}

input BookCreateWithoutTicketsInput {
  id: String
  title: String!
  description: String!
  publisher: String!
  author: String!
  createdAt: DateTime
  updatedAt: DateTime
  epub: String
  categories: CategoryCreateNestedManyWithoutBooksInput
  media: MediaCreateNestedOneWithoutBookInput
  price: PriceCreateNestedOneWithoutBookInput!
}

input CategoryCreateNestedManyWithoutBooksInput {
  create: [CategoryCreateWithoutBooksInput!]
  connectOrCreate: [CategoryCreateOrConnectWithoutBooksInput!]
  connect: [CategoryWhereUniqueInput!]
}

input CategoryCreateWithoutBooksInput {
  id: String
  name: String!
  slug: String!
}

input CategoryCreateOrConnectWithoutBooksInput {
  where: CategoryWhereUniqueInput!
  create: CategoryCreateWithoutBooksInput!
}

input CategoryWhereUniqueInput {
  id: String
  AND: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  NOT: [CategoryWhereInput!]
  name: StringFilter
  slug: StringFilter
  books: BookListRelationFilter
}

input MediaCreateNestedOneWithoutBookInput {
  create: MediaCreateWithoutBookInput
  connectOrCreate: MediaCreateOrConnectWithoutBookInput
  connect: MediaWhereUniqueInput
}

input MediaCreateWithoutBookInput {
  id: String
  thumbnail: String!
  image: String!
  blurhash: String!
  imageH: Int!
  imageW: Int!
  metadata: JSON
  profile: ProfileCreateNestedOneWithoutMediaInput
}

input ProfileCreateNestedOneWithoutMediaInput {
  create: ProfileCreateWithoutMediaInput
  connectOrCreate: ProfileCreateOrConnectWithoutMediaInput
  connect: ProfileWhereUniqueInput
}

input ProfileCreateWithoutMediaInput {
  id: String
  email: String!
  firstName: String!
  lastName: String!
  phone: String!
  createdAt: DateTime
  updatedAt: DateTime
  user: UserCreateNestedOneWithoutProfileInput!
  address: AddressCreateNestedOneWithoutProfileInput
}

input AddressCreateNestedOneWithoutProfileInput {
  create: AddressCreateWithoutProfileInput
  connectOrCreate: AddressCreateOrConnectWithoutProfileInput
  connect: AddressWhereUniqueInput
}

input AddressCreateWithoutProfileInput {
  street: String
  country: String
  state: String
  city: String
  province: String
}

input AddressCreateOrConnectWithoutProfileInput {
  where: AddressWhereUniqueInput!
  create: AddressCreateWithoutProfileInput!
}

input AddressWhereUniqueInput {
  id: Int
  AND: [AddressWhereInput!]
  OR: [AddressWhereInput!]
  NOT: [AddressWhereInput!]
  street: StringFilter
  country: StringFilter
  state: StringFilter
  city: StringFilter
  province: StringFilter
  profile: ProfileListRelationFilter
}

input ProfileCreateOrConnectWithoutMediaInput {
  where: ProfileWhereUniqueInput!
  create: ProfileCreateWithoutMediaInput!
}

input MediaCreateOrConnectWithoutBookInput {
  where: MediaWhereUniqueInput!
  create: MediaCreateWithoutBookInput!
}

input MediaWhereUniqueInput {
  id: String
  AND: [MediaWhereInput!]
  OR: [MediaWhereInput!]
  NOT: [MediaWhereInput!]
  thumbnail: StringFilter
  image: StringFilter
  blurhash: StringFilter
  imageH: IntFilter
  imageW: IntFilter
  metadata: JsonNullableFilter
  profile: ProfileNullableRelationFilter
  book: BookNullableRelationFilter
}

input PriceCreateNestedOneWithoutBookInput {
  create: PriceCreateWithoutBookInput
  connectOrCreate: PriceCreateOrConnectWithoutBookInput
  connect: PriceWhereUniqueInput
}

input PriceCreateWithoutBookInput {
  id: String
  value: Decimal
  unit: PriceUnit
}

input PriceCreateOrConnectWithoutBookInput {
  where: PriceWhereUniqueInput!
  create: PriceCreateWithoutBookInput!
}

input PriceWhereUniqueInput {
  id: String
  AND: [PriceWhereInput!]
  OR: [PriceWhereInput!]
  NOT: [PriceWhereInput!]
  value: DecimalFilter
  unit: EnumPriceUnitFilter
  book: BookListRelationFilter
}

input BookCreateOrConnectWithoutTicketsInput {
  where: BookWhereUniqueInput!
  create: BookCreateWithoutTicketsInput!
}

input TicketCreateOrConnectWithoutUserInput {
  where: TicketWhereUniqueInput!
  create: TicketCreateWithoutUserInput!
}

input TicketWhereUniqueInput {
  bookId: String
  userId: String
  bookId_userId: TicketBookIdUserIdCompoundUniqueInput
  AND: [TicketWhereInput!]
  OR: [TicketWhereInput!]
  NOT: [TicketWhereInput!]
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  rentDate: DateTimeFilter
  returnDate: DateTimeFilter
  book: BookRelationFilter
  user: UserRelationFilter
}

input TicketBookIdUserIdCompoundUniqueInput {
  bookId: String!
  userId: String!
}

input TicketCreateManyUserInputEnvelope {
  data: [TicketCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input TicketCreateManyUserInput {
  createdAt: DateTime
  updatedAt: DateTime
  rentDate: DateTime!
  returnDate: DateTime!
  bookId: String!
}

input UserCreateOrConnectWithoutProfileInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutProfileInput!
}

input UserWhereUniqueInput {
  id: String
  username: String
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  password: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  role: EnumRoleFilter
  profile: ProfileNullableRelationFilter
  tickets: TicketListRelationFilter
}

input MediaCreateNestedOneWithoutProfileInput {
  create: MediaCreateWithoutProfileInput
  connectOrCreate: MediaCreateOrConnectWithoutProfileInput
  connect: MediaWhereUniqueInput
}

input MediaCreateWithoutProfileInput {
  id: String
  thumbnail: String!
  image: String!
  blurhash: String!
  imageH: Int!
  imageW: Int!
  metadata: JSON
  book: BookCreateNestedOneWithoutMediaInput
}

input BookCreateNestedOneWithoutMediaInput {
  create: BookCreateWithoutMediaInput
  connectOrCreate: BookCreateOrConnectWithoutMediaInput
  connect: BookWhereUniqueInput
}

input BookCreateWithoutMediaInput {
  id: String
  title: String!
  description: String!
  publisher: String!
  author: String!
  createdAt: DateTime
  updatedAt: DateTime
  epub: String
  categories: CategoryCreateNestedManyWithoutBooksInput
  tickets: TicketCreateNestedManyWithoutBookInput
  price: PriceCreateNestedOneWithoutBookInput!
}

input TicketCreateNestedManyWithoutBookInput {
  create: [TicketCreateWithoutBookInput!]
  connectOrCreate: [TicketCreateOrConnectWithoutBookInput!]
  createMany: TicketCreateManyBookInputEnvelope
  connect: [TicketWhereUniqueInput!]
}

input TicketCreateWithoutBookInput {
  createdAt: DateTime
  updatedAt: DateTime
  rentDate: DateTime!
  returnDate: DateTime!
  user: UserCreateNestedOneWithoutTicketsInput!
}

input UserCreateNestedOneWithoutTicketsInput {
  create: UserCreateWithoutTicketsInput
  connectOrCreate: UserCreateOrConnectWithoutTicketsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutTicketsInput {
  id: String
  username: String!
  password: String!
  createdAt: DateTime
  updatedAt: DateTime
  role: Role!
  profile: ProfileCreateNestedOneWithoutUserInput
}

input ProfileCreateNestedOneWithoutUserInput {
  create: ProfileCreateWithoutUserInput
  connectOrCreate: ProfileCreateOrConnectWithoutUserInput
  connect: ProfileWhereUniqueInput
}

input ProfileCreateWithoutUserInput {
  id: String
  email: String!
  firstName: String!
  lastName: String!
  phone: String!
  createdAt: DateTime
  updatedAt: DateTime
  media: MediaCreateNestedOneWithoutProfileInput!
  address: AddressCreateNestedOneWithoutProfileInput
}

input ProfileCreateOrConnectWithoutUserInput {
  where: ProfileWhereUniqueInput!
  create: ProfileCreateWithoutUserInput!
}

input UserCreateOrConnectWithoutTicketsInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutTicketsInput!
}

input TicketCreateOrConnectWithoutBookInput {
  where: TicketWhereUniqueInput!
  create: TicketCreateWithoutBookInput!
}

input TicketCreateManyBookInputEnvelope {
  data: [TicketCreateManyBookInput!]!
  skipDuplicates: Boolean
}

input TicketCreateManyBookInput {
  createdAt: DateTime
  updatedAt: DateTime
  rentDate: DateTime!
  returnDate: DateTime!
  userId: String!
}

input BookCreateOrConnectWithoutMediaInput {
  where: BookWhereUniqueInput!
  create: BookCreateWithoutMediaInput!
}

input MediaCreateOrConnectWithoutProfileInput {
  where: MediaWhereUniqueInput!
  create: MediaCreateWithoutProfileInput!
}

input BookCreateInput {
  id: String
  title: String!
  description: String!
  publisher: String!
  author: String!
  createdAt: DateTime
  updatedAt: DateTime
  epub: String
  categories: CategoryCreateNestedManyWithoutBooksInput
  tickets: TicketCreateNestedManyWithoutBookInput
  media: MediaCreateNestedOneWithoutBookInput
  price: PriceCreateNestedOneWithoutBookInput!
}

input BookUpdateInput {
  id: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  publisher: StringFieldUpdateOperationsInput
  author: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  epub: StringFieldUpdateOperationsInput
  categories: CategoryUpdateManyWithoutBooksNestedInput
  tickets: TicketUpdateManyWithoutBookNestedInput
  media: MediaUpdateOneWithoutBookNestedInput
  price: PriceUpdateOneRequiredWithoutBookNestedInput
}

input StringFieldUpdateOperationsInput {
  set: String
}

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input CategoryUpdateManyWithoutBooksNestedInput {
  create: [CategoryCreateWithoutBooksInput!]
  connectOrCreate: [CategoryCreateOrConnectWithoutBooksInput!]
  upsert: [CategoryUpsertWithWhereUniqueWithoutBooksInput!]
  set: [CategoryWhereUniqueInput!]
  disconnect: [CategoryWhereUniqueInput!]
  delete: [CategoryWhereUniqueInput!]
  connect: [CategoryWhereUniqueInput!]
  update: [CategoryUpdateWithWhereUniqueWithoutBooksInput!]
  updateMany: [CategoryUpdateManyWithWhereWithoutBooksInput!]
  deleteMany: [CategoryScalarWhereInput!]
}

input CategoryUpsertWithWhereUniqueWithoutBooksInput {
  where: CategoryWhereUniqueInput!
  update: CategoryUpdateWithoutBooksInput!
  create: CategoryCreateWithoutBooksInput!
}

input CategoryUpdateWithoutBooksInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
}

input CategoryUpdateWithWhereUniqueWithoutBooksInput {
  where: CategoryWhereUniqueInput!
  data: CategoryUpdateWithoutBooksInput!
}

input CategoryUpdateManyWithWhereWithoutBooksInput {
  where: CategoryScalarWhereInput!
  data: CategoryUpdateManyMutationInput!
}

input CategoryScalarWhereInput {
  AND: [CategoryScalarWhereInput!]
  OR: [CategoryScalarWhereInput!]
  NOT: [CategoryScalarWhereInput!]
  id: StringFilter
  name: StringFilter
  slug: StringFilter
}

input CategoryUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
}

input TicketUpdateManyWithoutBookNestedInput {
  create: [TicketCreateWithoutBookInput!]
  connectOrCreate: [TicketCreateOrConnectWithoutBookInput!]
  upsert: [TicketUpsertWithWhereUniqueWithoutBookInput!]
  createMany: TicketCreateManyBookInputEnvelope
  set: [TicketWhereUniqueInput!]
  disconnect: [TicketWhereUniqueInput!]
  delete: [TicketWhereUniqueInput!]
  connect: [TicketWhereUniqueInput!]
  update: [TicketUpdateWithWhereUniqueWithoutBookInput!]
  updateMany: [TicketUpdateManyWithWhereWithoutBookInput!]
  deleteMany: [TicketScalarWhereInput!]
}

input TicketUpsertWithWhereUniqueWithoutBookInput {
  where: TicketWhereUniqueInput!
  update: TicketUpdateWithoutBookInput!
  create: TicketCreateWithoutBookInput!
}

input TicketUpdateWithoutBookInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  rentDate: DateTimeFieldUpdateOperationsInput
  returnDate: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutTicketsNestedInput
}

input UserUpdateOneRequiredWithoutTicketsNestedInput {
  create: UserCreateWithoutTicketsInput
  connectOrCreate: UserCreateOrConnectWithoutTicketsInput
  upsert: UserUpsertWithoutTicketsInput
  connect: UserWhereUniqueInput
  update: UserUpdateToOneWithWhereWithoutTicketsInput
}

input UserUpsertWithoutTicketsInput {
  update: UserUpdateWithoutTicketsInput!
  create: UserCreateWithoutTicketsInput!
  where: UserWhereInput
}

input UserUpdateWithoutTicketsInput {
  id: StringFieldUpdateOperationsInput
  username: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  role: EnumRoleFieldUpdateOperationsInput
  profile: ProfileUpdateOneWithoutUserNestedInput
}

input EnumRoleFieldUpdateOperationsInput {
  set: Role
}

input ProfileUpdateOneWithoutUserNestedInput {
  create: ProfileCreateWithoutUserInput
  connectOrCreate: ProfileCreateOrConnectWithoutUserInput
  upsert: ProfileUpsertWithoutUserInput
  disconnect: ProfileWhereInput
  delete: ProfileWhereInput
  connect: ProfileWhereUniqueInput
  update: ProfileUpdateToOneWithWhereWithoutUserInput
}

input ProfileUpsertWithoutUserInput {
  update: ProfileUpdateWithoutUserInput!
  create: ProfileCreateWithoutUserInput!
  where: ProfileWhereInput
}

input ProfileUpdateWithoutUserInput {
  id: StringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  phone: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  media: MediaUpdateOneRequiredWithoutProfileNestedInput
  address: AddressUpdateOneWithoutProfileNestedInput
}

input MediaUpdateOneRequiredWithoutProfileNestedInput {
  create: MediaCreateWithoutProfileInput
  connectOrCreate: MediaCreateOrConnectWithoutProfileInput
  upsert: MediaUpsertWithoutProfileInput
  connect: MediaWhereUniqueInput
  update: MediaUpdateToOneWithWhereWithoutProfileInput
}

input MediaUpsertWithoutProfileInput {
  update: MediaUpdateWithoutProfileInput!
  create: MediaCreateWithoutProfileInput!
  where: MediaWhereInput
}

input MediaUpdateWithoutProfileInput {
  id: StringFieldUpdateOperationsInput
  thumbnail: StringFieldUpdateOperationsInput
  image: StringFieldUpdateOperationsInput
  blurhash: StringFieldUpdateOperationsInput
  imageH: IntFieldUpdateOperationsInput
  imageW: IntFieldUpdateOperationsInput
  metadata: JSON
  book: BookUpdateOneWithoutMediaNestedInput
}

input IntFieldUpdateOperationsInput {
  set: Int
  increment: Int
  decrement: Int
  multiply: Int
  divide: Int
}

input BookUpdateOneWithoutMediaNestedInput {
  create: BookCreateWithoutMediaInput
  connectOrCreate: BookCreateOrConnectWithoutMediaInput
  upsert: BookUpsertWithoutMediaInput
  disconnect: BookWhereInput
  delete: BookWhereInput
  connect: BookWhereUniqueInput
  update: BookUpdateToOneWithWhereWithoutMediaInput
}

input BookUpsertWithoutMediaInput {
  update: BookUpdateWithoutMediaInput!
  create: BookCreateWithoutMediaInput!
  where: BookWhereInput
}

input BookUpdateWithoutMediaInput {
  id: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  publisher: StringFieldUpdateOperationsInput
  author: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  epub: StringFieldUpdateOperationsInput
  categories: CategoryUpdateManyWithoutBooksNestedInput
  tickets: TicketUpdateManyWithoutBookNestedInput
  price: PriceUpdateOneRequiredWithoutBookNestedInput
}

input PriceUpdateOneRequiredWithoutBookNestedInput {
  create: PriceCreateWithoutBookInput
  connectOrCreate: PriceCreateOrConnectWithoutBookInput
  upsert: PriceUpsertWithoutBookInput
  connect: PriceWhereUniqueInput
  update: PriceUpdateToOneWithWhereWithoutBookInput
}

input PriceUpsertWithoutBookInput {
  update: PriceUpdateWithoutBookInput!
  create: PriceCreateWithoutBookInput!
  where: PriceWhereInput
}

input PriceUpdateWithoutBookInput {
  id: StringFieldUpdateOperationsInput
  value: DecimalFieldUpdateOperationsInput
  unit: EnumPriceUnitFieldUpdateOperationsInput
}

input DecimalFieldUpdateOperationsInput {
  set: Decimal
  increment: Decimal
  decrement: Decimal
  multiply: Decimal
  divide: Decimal
}

input EnumPriceUnitFieldUpdateOperationsInput {
  set: PriceUnit
}

input PriceUpdateToOneWithWhereWithoutBookInput {
  where: PriceWhereInput
  data: PriceUpdateWithoutBookInput!
}

input BookUpdateToOneWithWhereWithoutMediaInput {
  where: BookWhereInput
  data: BookUpdateWithoutMediaInput!
}

input MediaUpdateToOneWithWhereWithoutProfileInput {
  where: MediaWhereInput
  data: MediaUpdateWithoutProfileInput!
}

input AddressUpdateOneWithoutProfileNestedInput {
  create: AddressCreateWithoutProfileInput
  connectOrCreate: AddressCreateOrConnectWithoutProfileInput
  upsert: AddressUpsertWithoutProfileInput
  disconnect: AddressWhereInput
  delete: AddressWhereInput
  connect: AddressWhereUniqueInput
  update: AddressUpdateToOneWithWhereWithoutProfileInput
}

input AddressUpsertWithoutProfileInput {
  update: AddressUpdateWithoutProfileInput!
  create: AddressCreateWithoutProfileInput!
  where: AddressWhereInput
}

input AddressUpdateWithoutProfileInput {
  street: StringFieldUpdateOperationsInput
  country: StringFieldUpdateOperationsInput
  state: StringFieldUpdateOperationsInput
  city: StringFieldUpdateOperationsInput
  province: StringFieldUpdateOperationsInput
}

input AddressUpdateToOneWithWhereWithoutProfileInput {
  where: AddressWhereInput
  data: AddressUpdateWithoutProfileInput!
}

input ProfileUpdateToOneWithWhereWithoutUserInput {
  where: ProfileWhereInput
  data: ProfileUpdateWithoutUserInput!
}

input UserUpdateToOneWithWhereWithoutTicketsInput {
  where: UserWhereInput
  data: UserUpdateWithoutTicketsInput!
}

input TicketUpdateWithWhereUniqueWithoutBookInput {
  where: TicketWhereUniqueInput!
  data: TicketUpdateWithoutBookInput!
}

input TicketUpdateManyWithWhereWithoutBookInput {
  where: TicketScalarWhereInput!
  data: TicketUpdateManyMutationInput!
}

input TicketScalarWhereInput {
  AND: [TicketScalarWhereInput!]
  OR: [TicketScalarWhereInput!]
  NOT: [TicketScalarWhereInput!]
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  rentDate: DateTimeFilter
  returnDate: DateTimeFilter
  bookId: StringFilter
  userId: StringFilter
}

input TicketUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  rentDate: DateTimeFieldUpdateOperationsInput
  returnDate: DateTimeFieldUpdateOperationsInput
}

input MediaUpdateOneWithoutBookNestedInput {
  create: MediaCreateWithoutBookInput
  connectOrCreate: MediaCreateOrConnectWithoutBookInput
  upsert: MediaUpsertWithoutBookInput
  disconnect: MediaWhereInput
  delete: MediaWhereInput
  connect: MediaWhereUniqueInput
  update: MediaUpdateToOneWithWhereWithoutBookInput
}

input MediaUpsertWithoutBookInput {
  update: MediaUpdateWithoutBookInput!
  create: MediaCreateWithoutBookInput!
  where: MediaWhereInput
}

input MediaUpdateWithoutBookInput {
  id: StringFieldUpdateOperationsInput
  thumbnail: StringFieldUpdateOperationsInput
  image: StringFieldUpdateOperationsInput
  blurhash: StringFieldUpdateOperationsInput
  imageH: IntFieldUpdateOperationsInput
  imageW: IntFieldUpdateOperationsInput
  metadata: JSON
  profile: ProfileUpdateOneWithoutMediaNestedInput
}

input ProfileUpdateOneWithoutMediaNestedInput {
  create: ProfileCreateWithoutMediaInput
  connectOrCreate: ProfileCreateOrConnectWithoutMediaInput
  upsert: ProfileUpsertWithoutMediaInput
  disconnect: ProfileWhereInput
  delete: ProfileWhereInput
  connect: ProfileWhereUniqueInput
  update: ProfileUpdateToOneWithWhereWithoutMediaInput
}

input ProfileUpsertWithoutMediaInput {
  update: ProfileUpdateWithoutMediaInput!
  create: ProfileCreateWithoutMediaInput!
  where: ProfileWhereInput
}

input ProfileUpdateWithoutMediaInput {
  id: StringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  phone: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutProfileNestedInput
  address: AddressUpdateOneWithoutProfileNestedInput
}

input UserUpdateOneRequiredWithoutProfileNestedInput {
  create: UserCreateWithoutProfileInput
  connectOrCreate: UserCreateOrConnectWithoutProfileInput
  upsert: UserUpsertWithoutProfileInput
  connect: UserWhereUniqueInput
  update: UserUpdateToOneWithWhereWithoutProfileInput
}

input UserUpsertWithoutProfileInput {
  update: UserUpdateWithoutProfileInput!
  create: UserCreateWithoutProfileInput!
  where: UserWhereInput
}

input UserUpdateWithoutProfileInput {
  id: StringFieldUpdateOperationsInput
  username: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  role: EnumRoleFieldUpdateOperationsInput
  tickets: TicketUpdateManyWithoutUserNestedInput
}

input TicketUpdateManyWithoutUserNestedInput {
  create: [TicketCreateWithoutUserInput!]
  connectOrCreate: [TicketCreateOrConnectWithoutUserInput!]
  upsert: [TicketUpsertWithWhereUniqueWithoutUserInput!]
  createMany: TicketCreateManyUserInputEnvelope
  set: [TicketWhereUniqueInput!]
  disconnect: [TicketWhereUniqueInput!]
  delete: [TicketWhereUniqueInput!]
  connect: [TicketWhereUniqueInput!]
  update: [TicketUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [TicketUpdateManyWithWhereWithoutUserInput!]
  deleteMany: [TicketScalarWhereInput!]
}

input TicketUpsertWithWhereUniqueWithoutUserInput {
  where: TicketWhereUniqueInput!
  update: TicketUpdateWithoutUserInput!
  create: TicketCreateWithoutUserInput!
}

input TicketUpdateWithoutUserInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  rentDate: DateTimeFieldUpdateOperationsInput
  returnDate: DateTimeFieldUpdateOperationsInput
  book: BookUpdateOneRequiredWithoutTicketsNestedInput
}

input BookUpdateOneRequiredWithoutTicketsNestedInput {
  create: BookCreateWithoutTicketsInput
  connectOrCreate: BookCreateOrConnectWithoutTicketsInput
  upsert: BookUpsertWithoutTicketsInput
  connect: BookWhereUniqueInput
  update: BookUpdateToOneWithWhereWithoutTicketsInput
}

input BookUpsertWithoutTicketsInput {
  update: BookUpdateWithoutTicketsInput!
  create: BookCreateWithoutTicketsInput!
  where: BookWhereInput
}

input BookUpdateWithoutTicketsInput {
  id: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  publisher: StringFieldUpdateOperationsInput
  author: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  epub: StringFieldUpdateOperationsInput
  categories: CategoryUpdateManyWithoutBooksNestedInput
  media: MediaUpdateOneWithoutBookNestedInput
  price: PriceUpdateOneRequiredWithoutBookNestedInput
}

input BookUpdateToOneWithWhereWithoutTicketsInput {
  where: BookWhereInput
  data: BookUpdateWithoutTicketsInput!
}

input TicketUpdateWithWhereUniqueWithoutUserInput {
  where: TicketWhereUniqueInput!
  data: TicketUpdateWithoutUserInput!
}

input TicketUpdateManyWithWhereWithoutUserInput {
  where: TicketScalarWhereInput!
  data: TicketUpdateManyMutationInput!
}

input UserUpdateToOneWithWhereWithoutProfileInput {
  where: UserWhereInput
  data: UserUpdateWithoutProfileInput!
}

input ProfileUpdateToOneWithWhereWithoutMediaInput {
  where: ProfileWhereInput
  data: ProfileUpdateWithoutMediaInput!
}

input MediaUpdateToOneWithWhereWithoutBookInput {
  where: MediaWhereInput
  data: MediaUpdateWithoutBookInput!
}

type Subscription {
  updatedBook: Book!
}